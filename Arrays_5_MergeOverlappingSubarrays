//Optimal
//TC = O(NlogN) + O(N)
//SC = Worst Case O(N)

class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a,b) -> a[0]-b[0]);
        
        List<List<Integer>> res = new ArrayList<>();
        
        if(intervals.length == 0 || intervals == null) return res.toArray(new int[res.size()][]);
        
        int start = intervals[0][0];
        int end = intervals[0][1];
        
        for(int[] i : intervals){
            if(i[0] <= end && i[1] > end){
                end = i[1];
            }else if(i[0] <= end && i[1] <= end){
                continue;
            }else if(i[0] > end){
                List<Integer> list2 = new ArrayList<>();
                list2.add(start);
                list2.add(end);
                res.add(list2);
                start = i[0];
                end = i[1];
            }
        }
        List<Integer> list = new ArrayList<>();
        list.add(start);
        list.add(end);
        res.add(list);
        int[][] res2 = new int[res.size()][];
        System.out.println(res.get(0).get(1));
        for(int j = 0; j < res.size(); j++){
            res2[j][0] = res.get(j).get(0);
            res2[j][1] = res.get(j).get(1);
        }
        return res2;
    }
}

Strivers:
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        
        if(intervals.length == 0 || intervals == null) 
            return res.toArray(new int[0][]);
        
        Arrays.sort(intervals, (a, b) -> a[0] - b[0]);
        
        int start = intervals[0][0];
        int end = intervals[0][1];
        
        for(int[] i : intervals) {
            if(i[0] <= end) {
                end = Math.max(end, i[1]);
            }
            else {
                res.add(new int[]{start, end});
                start = i[0];
                end = i[1];
            }
        }
        res.add(new int[]{start, end});
       return res.toArray(new int[0][]);
    }
}