#1 Two Sum
// Brute Force
//TC = O(N^2)
//SC = O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        for(int i = 0; i < nums.length; i++){
            int num1 = nums[i];
            int temp = target - num1;
            for(int j = i+1; j < nums.length; j++){
                if(nums[j] == temp){
                    res[0] = i;
                    res[1] = j;
                    return res;
                }
            }
        }
        
        return res;
    }
}


//Optimal
//TC = O(N)
//SC = O(N)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < nums.length; i++){
            int num1 = nums[i];
            int temp = target - num1;
            if(map.containsKey(temp)){
                res[0] = i;
                res[1] = map.get(temp);
                return res;
            }
            
            map.put(num1, i);
        }
        
        return res;
    }
}