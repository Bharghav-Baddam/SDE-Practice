//Brute
//TC : O(N) + O(N) = O(N)
//SC : O(N)

Set<Integer> set = new HashSet<Integer>();
     int[] res = new int[2];
     for(Integer i : arr){
         if(set.contains(i)){
             res[0] = i;
         }else{
             set.add(i);
         }
     }
     
     for(int j = 1; j <= arr.length; j++){
         if(!set.contains(j)){
             res[1] = j;
             break;
         }
     }
     
     return res;
    }


    Method 2 (Use count array)
Approach: 

Create a temp array temp[] of size n with all initial values as 0.
Traverse the input array arr[], and do following for each arr[i] 
if(temp[arr[i]] == 0) temp[arr[i]] = 1;
if(temp[arr[i]] == 1) output “arr[i]” //repeating
Traverse temp[] and output the array element having value as 0 (This is the missing element)
Time Complexity: O(n)

Auxiliary Space: O(n)

Method 6 (Use a Map)
Approach: 
This method involves creating a Hashtable with the help of Map. In this, the elements are mapped to their natural index. In this process, if an element is mapped twice, then it is the repeating element. And if an element’s mapping is not there, then it is the missing element.
// Java program to find the
// repeating and missing elements
// using Maps

import java.util.*;

public class Test1 {

	public static void main(String[] args)
	{

		int[] arr = { 4, 3, 6, 2, 1, 1 };

		Map<Integer, Boolean> numberMap
			= new HashMap<>();

		int max = arr.length;

		for (Integer i : arr) {

			if (numberMap.get(i) == null) {
				numberMap.put(i, true);
			}
			else {
				System.out.println("Repeating = " + i);
			}
		}
		for (int i = 1; i <= max; i++) {
			if (numberMap.get(i) == null) {
				System.out.println("Missing = " + i);
			}
		}
	}
}

Method 3 (Use elements as Index and mark the visited places)
Approach: 
Traverse the array. While traversing, use the absolute value of every element as an index and make the value at this index as negative to mark it visited. If something is already marked negative then this is the repeating element. To find missing, traverse the array again and look for a positive value.
TC : O(N)
// Java program to Find the repeating
// and missing elements

import java.io.*;

class GFG {

	static void printTwoElements(int arr[], int size)
	{
		int i;
		System.out.print("The repeating element is ");

		for (i = 0; i < size; i++) {
			int abs_val = Math.abs(arr[i]);
			if (arr[abs_val - 1] > 0)
				arr[abs_val - 1] = -arr[abs_val - 1];
			else
				System.out.println(abs_val);
		}

		System.out.print("And the missing element is ");
		for (i = 0; i < size; i++) {
			if (arr[i] > 0)
				System.out.println(i + 1);
		}
	}

	// Driver code
	public static void main(String[] args)
	{
		int arr[] = { 7, 3, 4, 5, 5, 6, 2 };
		int n = arr.length;
		printTwoElements(arr, n);
	}
}
