Sort an array of 0’s 1’s 2’s without using extra space or sorting algo 
https://www.youtube.com/watch?v=oaVa-9wmpns&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=2 (Problem link in description)


// Brute Force
//TC = O(Nlog(N))
//SC = O(1)

Array Sort
class Solution {
    public void sortColors(int[] nums) {
        Arrays.sort(nums);
    }
}



//Optimal by Counting Sort
//TC - 2 passes of O(N) => O(2N) - >O(N)

Count 0's, 1's and 2's and then loop number of 0 times to fill 0, loop number of 1 times to fill 1 and loop number of 2 times to fill 2
//Code not written

// More optimal i.e., in just 1 pass also called Dutch National Flag Algorithm
//TC -> O(N)
//SC -> O(1)

//Striver Solution
class Solution {
    public void sortColors(int[] nums) {
        int lo = 0; 
        int hi = nums.length - 1; 
        int mid = 0; 
        int temp; 
        while (mid <= hi) { 
            switch (nums[mid]) { 
                case 0: { 
                    temp = nums[lo]; 
                    nums[lo] = nums[mid]; 
                    nums[mid] = temp; 
                    lo++; 
                    mid++; 
                    break; 
                } 
                case 1: 
                    mid++; 
                    break; 
                case 2: { 
                    temp = nums[mid]; 
                    nums[mid] = nums[hi]; 
                    nums[hi] = temp; 
                    hi--; 
                    break; 
                } 
            } 
        }
    }
}

//My Solution
class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length - 1;
        int temp;
        while(mid <= high){
            if(nums[mid] == 0){
                temp = nums[low];
                nums[low] = nums[mid];
                nums[mid] = temp;
                low++;
                mid++;
            }else if(nums[mid] == 1){
                mid++;
            }else if(nums[mid] == 2){
                temp = nums[high];
                nums[high] = nums[mid];
                nums[mid] = temp;
                high--;
            }
        }
    }
}